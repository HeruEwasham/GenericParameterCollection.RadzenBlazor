@using Radzen;
@using Radzen.Blazor;
@using ParameterComponents;
@using YngveHestem.GenericParameterCollection.ParameterValueConverters; 

@inject TooltipService tooltipService

<div class="parameterCollectionView">
    <RadzenStack>
        @if (_currentParameterCollection != null)
        {
            foreach (var parameter in _currentParameterCollection)
            {
                var additionalInfo = parameter.GetAdditionalInfo();
                var localOptions = Options;
                if (Options.AdditionalInfoWillOverride && additionalInfo != null)
                {
                    localOptions = ParameterCollectionViewOptions.CreateFromParameterCollection(additionalInfo, Options);
                }

                if (additionalInfo == null)
                {
                    additionalInfo = new ParameterCollection();
                }

                var parameterText = parameter.Key;
                if (additionalInfo.HasKeyAndCanConvertTo(localOptions.ReadableParameterTextKey, typeof(string)))
                {
                    parameterText = additionalInfo.GetByKey<string>(localOptions.ReadableParameterTextKey);
                }
                else if (localOptions.ShowParameterNameAsHumanReadable)
                {
                    parameterText = parameterText.HumanReadable();
                }

                if (CustomParameterComponents != null && CustomParameterComponents.Any(p => p.ShouldComponentBeUsed(parameter, additionalInfo, localOptions, CustomConverters)))
                {
                    var def = CustomParameterComponents.First(p => p.ShouldComponentBeUsed(parameter, additionalInfo, localOptions, CustomConverters));
                    var parentType = def.GetHowParameterNameIsShown(parameter, additionalInfo, localOptions, CustomConverters);
                    var compParameters = def.GetComponentParameters(parameter, parameterText, additionalInfo, localOptions, CustomConverters, (value) => ChangeParameter(parameter.Key, value));
                    var compType = def.GetComponentType(parameter, additionalInfo, localOptions, CustomConverters);
                    if (parentType == ParameterComponentParentType.None)
                    {
                        <DynamicComponent Type="@compType" Parameters="@compParameters"></DynamicComponent>
                    }
                    else if (parentType == ParameterComponentParentType.RadzenFormField)
                    {
                        <RadzenFormField Text="@parameterText" AllowFloatingLabel="@localOptions.AllowFloatingLabel" Variant="@localOptions.ElementsDesignVariant" MouseEnter="@(args => {
                                                                                             if (additionalInfo.HasKeyAndCanConvertTo(localOptions.TooltipParameterTextKey, typeof(string)))
                                                                                             {
                                                                                                 tooltipService.Open(args, additionalInfo.GetByKey<string>(localOptions.TooltipParameterTextKey, CustomConverters), localOptions.TooltipOptions);
                                                                                             }
                                                                                             })">
                            <DynamicComponent Type="@compType" Parameters="@compParameters"></DynamicComponent>
                        </RadzenFormField>
                    }
                    else if (parentType == ParameterComponentParentType.RadzenFieldset)
                    {
                        <RadzenFieldset Text="@parameterText" MouseEnter="@(args => {
                                                                             if (additionalInfo.HasKeyAndCanConvertTo(localOptions.TooltipParameterTextKey, typeof(string)))
                                                                             {
                                                                                 tooltipService.Open(args, additionalInfo.GetByKey<string>(localOptions.TooltipParameterTextKey, CustomConverters), localOptions.TooltipOptions);
                                                                             }
                                                                             })">
                            <DynamicComponent Type="@compType" Parameters="@compParameters"></DynamicComponent>
                        </RadzenFieldset>
                    }
                }
                else if (parameter.Type == ParameterType.ParameterCollection)
                {
                    <RadzenFieldset Text="@parameterText" MouseEnter="@(args => {
                                                                             if (additionalInfo.HasKeyAndCanConvertTo(localOptions.TooltipParameterTextKey, typeof(string)))
                                                                             {
                                                                                 tooltipService.Open(args, additionalInfo.GetByKey<string>(localOptions.TooltipParameterTextKey, CustomConverters), localOptions.TooltipOptions);
                                                                             }
                                                                             })">
                        <ParameterCollectionView ParameterCollection="@(parameter.GetValue<ParameterCollection>())" Options="@localOptions" OnChange="@((args) => ChangeParameter(parameter.Key, args.NewParameterCollection))" CustomConverters="@CustomConverters" CustomParameterComponents="@CustomParameterComponents"></ParameterCollectionView>
                    </RadzenFieldset>
                }
                else
                {
                    <RadzenFormField Text="@parameterText" AllowFloatingLabel="@localOptions.AllowFloatingLabel" Variant="@localOptions.ElementsDesignVariant" MouseEnter="@(args => {
                                                                         if (additionalInfo.HasKeyAndCanConvertTo(localOptions.TooltipParameterTextKey, typeof(string)))
                                                                         {
                                                                             tooltipService.Open(args, additionalInfo.GetByKey<string>(localOptions.TooltipParameterTextKey, CustomConverters), localOptions.TooltipOptions);
                                                                         }
                                                                         })">
                        @if (parameter.Type == ParameterType.String)
                        {
                            if (localOptions.IsPassword)
                            {
                                <RadzenPassword aria-label="@parameterText" ReadOnly="@localOptions.ReadOnly" Value="@(parameter.GetValue<string>(CustomConverters))" Placeholder="@localOptions.PlaceholderText" Change="(value) => ChangeParameter(parameter.Key, value)"></RadzenPassword>
                            }
                            else
                            {
                                <RadzenTextBox aria-label="@parameterText" ReadOnly="@localOptions.ReadOnly" Value="@(parameter.GetValue<string>(CustomConverters))" Placeholder="@localOptions.PlaceholderText" MaxLength="@localOptions.MaxNumberOfCharacters" Change="(value) => ChangeParameter(parameter.Key, value)"></RadzenTextBox>
                            }
                        }
                        else if (parameter.Type == ParameterType.String_Multiline)
                        {
                            <RadzenTextArea aria-label="@parameterText" ReadOnly="@localOptions.ReadOnly" Value="@(parameter.GetValue<string>(CustomConverters))" Placeholder="@localOptions.PlaceholderText" MaxLength="@localOptions.MaxNumberOfCharacters" Rows="@localOptions.NumberOfRowsInTextArea" Cols="@localOptions.NumberOfColumnsInTextArea" Change="(value) => ChangeParameter(parameter.Key, value)"></RadzenTextArea>
                        }
                        else if (parameter.Type == ParameterType.Int)
                        {
                            <RadzenNumeric aria-label="@parameterText" ReadOnly="@localOptions.ReadOnly" TValue="int" Value="@(parameter.GetValue<int>(CustomConverters))" Placeholder="@localOptions.PlaceholderText" Min="@localOptions.MinNumber" Max="@localOptions.MaxNumber" Step="@localOptions.StepInteger.ToString()" Change="(value) => ChangeParameter(parameter.Key, value)"></RadzenNumeric>
                        }
                        else if (parameter.Type == ParameterType.Decimal)
                        {
                            <RadzenNumeric aria-label="@parameterText" ReadOnly="@localOptions.ReadOnly" TValue="decimal" Value="@(parameter.GetValue<decimal>(CustomConverters))" Placeholder="@localOptions.PlaceholderText" Min="@localOptions.MinNumber" Max="@localOptions.MaxNumber" Step="@localOptions.StepDecimal.ToString()" Change="(value) => ChangeParameter(parameter.Key, value)"></RadzenNumeric>
                        }
                        else if (parameter.Type == ParameterType.Bytes)
                        {
                            <RadzenFileInput aria-label="@parameterText" Disabled="@localOptions.ReadOnly" TValue="byte[]" Value="@(parameter.GetValue<byte[]>(CustomConverters))" Placeholder="@localOptions.PlaceholderText" ChooseText="@localOptions.ChooseFileText" DeleteText="@localOptions.DeleteFileText" MaxHeight="@localOptions.FilePreviewHeight" MaxWidth="@localOptions.FilePreviewWidth" Change="(value) => ChangeParameter(parameter.Key, value)" MaxFileSize="@localOptions.MaxFileSize" Accept="@localOptions.AcceptedMimeTypes.JoinOrEmpty(",")"></RadzenFileInput>
                        }
                        else if (parameter.Type == ParameterType.Bool)
                        {
                            <RadzenStack Class="rz-px-sm-12 rz-py-sm-4">
                                @if (localOptions.BoolControlToUse == BoolControl.Switch)
                                {
                                    <RadzenSwitch aria-label="@parameterText" Disabled="@localOptions.ReadOnly" Value="@(parameter.GetValue<bool>(CustomConverters))" Change="(value) => ChangeParameter(parameter.Key, value)"></RadzenSwitch>
                                }
                                else
                                {
                                    <RadzenCheckBox aria-label="@parameterText" Disabled="@localOptions.ReadOnly" TValue="bool" Value="@(parameter.GetValue<bool>(CustomConverters))" Change="(value) => ChangeParameter(parameter.Key, value)"></RadzenCheckBox>
                                }
                            </RadzenStack>
                        }
                        else if (parameter.Type == ParameterType.DateTime)
                        {
                            <RadzenDatePicker aria-label="@parameterText" ReadOnly="@localOptions.ReadOnly" DateFormat="@localOptions.DateTimeFormat" Placeholder="@localOptions.PlaceholderText" AllowClear="false" TValue="DateTime" ShowDays="true" ShowTime="true" ShowSeconds="true" HoursStep="@localOptions.HoursStep.ToString()" MinutesStep="@localOptions.MinutesStep.ToString()" SecondsStep="@localOptions.SecondsStep.ToString()" ShowCalendarWeek="@localOptions.ShowCalenderWeek" Min="@localOptions.MinDate" Max="@localOptions.MaxDate" CalendarWeekTitle="@localOptions.CalendarWeekTitle" Value="@(parameter.GetValue<DateTime>(CustomConverters))" Change="(value) => ChangeParameter(parameter.Key, value)"></RadzenDatePicker>
                        }
                        else if (parameter.Type == ParameterType.Date)
                        {
                            <RadzenDatePicker aria-label="@parameterText" ReadOnly="@localOptions.ReadOnly" DateFormat="@localOptions.DateFormat" Placeholder="@localOptions.PlaceholderText" AllowClear="false" TValue="DateTime" ShowDays="true" ShowCalendarWeek="@localOptions.ShowCalenderWeek" Min="@localOptions.MinDate" Max="@localOptions.MaxDate" CalendarWeekTitle="@localOptions.CalendarWeekTitle" Value="@(parameter.GetValue<DateTime>(CustomConverters))" Change="(value) => ChangeParameter(parameter.Key, value)"></RadzenDatePicker>
                        }
                        else if (parameter.Type == ParameterType.Enum || parameter.Type == ParameterType.SelectOne)
                        {
                            <RadzenDropDown aria-label="@parameterText" ReadOnly="@localOptions.ReadOnly" TValue="string" Placeholder="@localOptions.PlaceholderText" Data="@parameter.GetChoices()" Value="@(parameter.GetValue<string>(CustomConverters))" Change="(value) => ChangeParameter(parameter.Key, value)"></RadzenDropDown>
                        }
                        else if (parameter.Type == ParameterType.SelectMany)
                        {
                            <RadzenDropDown aria-label="@parameterText" ReadOnly="@localOptions.ReadOnly" Multiple=true AllowClear=true MaxSelectedLabels="@localOptions.MaxSelectedLabels" Chips="@localOptions.ShowLabelsAsChips" SelectedItemsText="@localOptions.SelectedItemsText" SelectAllText="@localOptions.SelectAllItemsText" TValue="IEnumerable<string>" Placeholder="@localOptions.SelectAllItemsText" Data="@parameter.GetChoices()" Value="@(parameter.GetValue<string[]>(CustomConverters))" Change="(value) => ChangeParameter(parameter.Key, value)"></RadzenDropDown>
                        }
                        else if (parameter.Type == ParameterType.String_IEnumerable
                        || parameter.Type == ParameterType.String_Multiline_IEnumerable
                        || parameter.Type == ParameterType.Int_IEnumerable
                        || parameter.Type == ParameterType.Decimal_IEnumerable
                        || parameter.Type == ParameterType.Bool_IEnumerable
                        || parameter.Type == ParameterType.DateTime_IEnumerable
                        || parameter.Type == ParameterType.Date_IEnumerable
                        || parameter.Type == ParameterType.ParameterCollection_IEnumerable)
                        {
                            <RadzenStack>
                                <RadzenDataList aria-label="@parameterText" AllowVirtualization=@localOptions.UseVirtualizationOnList Style="@(localOptions.UseVirtualizationOnList ? "height:400px;overflow:auto;" : "")"
                                                WrapItems="@(!localOptions.UseVirtualizationOnList)" AllowPaging="@(!localOptions.UseVirtualizationOnList)"
                                                Data="@(GetDataOfList(parameter))" TItem="Tuple<int, object>" PageSize="@localOptions.ListPageSize" PagerHorizontalAlign="HorizontalAlign.Left" ShowPagingSummary="true">
                                    <Template Context="itemValue">
                                        @if (parameter.Type == ParameterType.String_IEnumerable)
                                        {
                                            if (localOptions.IsPassword)
                                            {
                                                <RadzenPassword ReadOnly="@localOptions.ReadOnly" Value="@((string)itemValue.Item2)" Placeholder="@localOptions.PlaceholderText" Change="(value) => UpdateListParameter<string>(parameter.Key, itemValue.Item1, value)"></RadzenPassword>
                                            }
                                            else
                                            {
                                                <RadzenTextBox ReadOnly="@localOptions.ReadOnly" Value="@((string)itemValue.Item2)" Placeholder="@localOptions.PlaceholderText" MaxLength="@localOptions.MaxNumberOfCharacters" Change="(value) => UpdateListParameter<string>(parameter.Key, itemValue.Item1, value)"></RadzenTextBox>
                                            }
                                            <RadzenButton Disabled="@localOptions.ReadOnly" aria-description="@(string.Format(localOptions.DeleteEntryFromListAriaDescription, itemValue.Item1 + 1, parameterText, itemValue.Item2.ToString()))" ButtonStyle="ButtonStyle.Danger" Variant="@localOptions.ElementsDesignVariant" Style="float: right" Text="@localOptions.DeleteEntryFromListText" Click="@((args) => DeleteListParameter<string>(parameter.Key, itemValue.Item1))"></RadzenButton>
                                        }
                                        else if (parameter.Type == ParameterType.String_Multiline_IEnumerable)
                                        {
                                            <RadzenTextArea ReadOnly="@localOptions.ReadOnly" Value="@((string)itemValue.Item2)" Placeholder="@localOptions.PlaceholderText" MaxLength="@localOptions.MaxNumberOfCharacters" Rows="@localOptions.NumberOfRowsInTextArea" Cols="@localOptions.NumberOfColumnsInTextArea" Change="(value) => UpdateListParameter<string>(parameter.Key, itemValue.Item1, value)"></RadzenTextArea>
                                            <RadzenButton Disabled="@localOptions.ReadOnly" aria-description="@(string.Format(localOptions.DeleteEntryFromListAriaDescription, itemValue.Item1 + 1, parameterText, itemValue.Item2.ToString()))" ButtonStyle="ButtonStyle.Danger" Variant="@localOptions.ElementsDesignVariant" Style="float: right" Text="@localOptions.DeleteEntryFromListText" Click="@((args) => DeleteListParameter<string>(parameter.Key, itemValue.Item1))"></RadzenButton>
                                        }
                                        else if (parameter.Type == ParameterType.Int_IEnumerable)
                                        {
                                            <RadzenNumeric ReadOnly="@localOptions.ReadOnly" TValue="int" Value="@((int)itemValue.Item2)" Placeholder="@localOptions.PlaceholderText" Min="@localOptions.MinNumber" Max="@localOptions.MaxNumber" Step="@localOptions.StepInteger.ToString()" Change="(value) => UpdateListParameter<int>(parameter.Key, itemValue.Item1, value)"></RadzenNumeric>
                                            <RadzenButton Disabled="@localOptions.ReadOnly" aria-description="@(string.Format(localOptions.DeleteEntryFromListAriaDescription, itemValue.Item1 + 1, parameterText, itemValue.Item2.ToString()))" ButtonStyle="ButtonStyle.Danger" Variant="@localOptions.ElementsDesignVariant" Style="float: right" Text="@localOptions.DeleteEntryFromListText" Click="@((args) => DeleteListParameter<int>(parameter.Key, itemValue.Item1))"></RadzenButton>
                                        }
                                        else if (parameter.Type == ParameterType.Decimal_IEnumerable)
                                        {
                                            <RadzenNumeric ReadOnly="@localOptions.ReadOnly" TValue="decimal" Value="@((decimal)itemValue.Item2)" Placeholder="@localOptions.PlaceholderText" Min="@localOptions.MinNumber" Max="@localOptions.MaxNumber" Step="@localOptions.StepDecimal.ToString()" Change="(value) => UpdateListParameter<decimal>(parameter.Key, itemValue.Item1, value)"></RadzenNumeric>
                                            <RadzenButton Disabled="@localOptions.ReadOnly" aria-description="@(string.Format(localOptions.DeleteEntryFromListAriaDescription, itemValue.Item1 + 1, parameterText, itemValue.Item2.ToString()))" ButtonStyle="ButtonStyle.Danger" Variant="@localOptions.ElementsDesignVariant" Style="float: right" Text="@localOptions.DeleteEntryFromListText" Click="@((args) => DeleteListParameter<decimal>(parameter.Key, itemValue.Item1))"></RadzenButton>
                                        }
                                        else if (parameter.Type == ParameterType.Bool_IEnumerable)
                                        {
                                            if (localOptions.BoolControlToUse == BoolControl.Switch)
                                            {
                                                <RadzenSwitch Disabled="@localOptions.ReadOnly" Value="@((bool)itemValue.Item2)" Change="(value) => UpdateListParameter<bool>(parameter.Key, itemValue.Item1, value)"></RadzenSwitch>
                                            }
                                            else
                                            {
                                                <RadzenCheckBox Disabled="@localOptions.ReadOnly" TValue="bool" Value="@((bool)itemValue.Item2)" Change="(value) => UpdateListParameter<bool>(parameter.Key, itemValue.Item1, value)"></RadzenCheckBox>
                                            }
                                            <RadzenButton Disabled="@localOptions.ReadOnly" aria-description="@(string.Format(localOptions.DeleteEntryFromListAriaDescription, itemValue.Item1 + 1, parameterText, itemValue.Item2.ToString()))" ButtonStyle="ButtonStyle.Danger" Variant="@localOptions.ElementsDesignVariant" Style="float: right" Text="@localOptions.DeleteEntryFromListText" Click="@((args) => DeleteListParameter<bool>(parameter.Key, itemValue.Item1))"></RadzenButton>
                                        }
                                        else if (parameter.Type == ParameterType.DateTime_IEnumerable)
                                        {
                                            <RadzenDatePicker ReadOnly="@localOptions.ReadOnly" DateFormat="@localOptions.DateTimeFormat" Placeholder="@localOptions.PlaceholderText" AllowClear="false" TValue="DateTime" ShowDays="true" ShowTime="true" ShowSeconds="true" HoursStep="@localOptions.HoursStep.ToString()" MinutesStep="@localOptions.MinutesStep.ToString()" SecondsStep="@localOptions.SecondsStep.ToString()" ShowCalendarWeek="@localOptions.ShowCalenderWeek" Min="@localOptions.MinDate" Max="@localOptions.MaxDate" CalendarWeekTitle="@localOptions.CalendarWeekTitle" Value="@((DateTime)itemValue.Item2)" Change="(value) => UpdateListParameter<DateTime>(parameter.Key, itemValue.Item1, value ?? DateTime.Now)"></RadzenDatePicker>
                                            <RadzenButton Disabled="@localOptions.ReadOnly" aria-description="@(string.Format(localOptions.DeleteEntryFromListAriaDescription, itemValue.Item1 + 1, parameterText, itemValue.Item2.ToString()))" ButtonStyle="ButtonStyle.Danger" Variant="@localOptions.ElementsDesignVariant" Style="float: right" Text="@localOptions.DeleteEntryFromListText" Click="@((args) => DeleteListParameter<DateTime>(parameter.Key, itemValue.Item1))"></RadzenButton>
                                        }
                                        else if (parameter.Type == ParameterType.Date_IEnumerable)
                                        {
                                            <RadzenDatePicker ReadOnly="@localOptions.ReadOnly" DateFormat="@localOptions.DateFormat" Placeholder="@localOptions.PlaceholderText" AllowClear="false" TValue="DateTime" ShowDays="true" ShowCalendarWeek="@localOptions.ShowCalenderWeek" Min="@localOptions.MinDate" Max="@localOptions.MaxDate" CalendarWeekTitle="@localOptions.CalendarWeekTitle" Value="@((DateTime)itemValue.Item2)" Change="(value) => UpdateListParameter<DateTime>(parameter.Key, itemValue.Item1, value ?? DateTime.Now)"></RadzenDatePicker>
                                            <RadzenButton Disabled="@localOptions.ReadOnly" aria-description="@(string.Format(localOptions.DeleteEntryFromListAriaDescription, itemValue.Item1 + 1, parameterText, itemValue.Item2.ToString()))" ButtonStyle="ButtonStyle.Danger" Variant="@localOptions.ElementsDesignVariant" Style="float: right" Text="@localOptions.DeleteEntryFromListText" Click="@((args) => DeleteListParameter<DateTime>(parameter.Key, itemValue.Item1))"></RadzenButton>
                                        }
                                        else if (parameter.Type == ParameterType.ParameterCollection_IEnumerable)
                                        {
                                            <ParameterCollectionView ParameterCollection="@((ParameterCollection)itemValue.Item2)" Options="@localOptions" OnChange="@((args) => UpdateListParameter<ParameterCollection>(parameter.Key, itemValue.Item1, args.NewParameterCollection))" CustomConverters="@CustomConverters" CustomParameterComponents="@CustomParameterComponents"></ParameterCollectionView>
                                            <RadzenButton Disabled="@localOptions.ReadOnly" aria-description="@(string.Format(localOptions.DeleteEntryFromListAriaDescription, itemValue.Item1 + 1, parameterText, itemValue.Item2.ToString()))" ButtonStyle="ButtonStyle.Danger" Variant="@localOptions.ElementsDesignVariant" Style="float: right" Text="@localOptions.DeleteEntryFromListText" Click="@((args) => DeleteListParameter<ParameterCollection>(parameter.Key, itemValue.Item1))"></RadzenButton>
                                        }
                                    </Template>
                                </RadzenDataList>
                                @if (!localOptions.ReadOnly)
                                {
                                    if (parameter.Type == ParameterType.String_IEnumerable || parameter.Type == ParameterType.String_Multiline_IEnumerable)
                                    {
                                        <RadzenButton Disabled="@localOptions.ReadOnly" aria-description="@(string.Format(localOptions.AddEntryToListAriaDescription, parameterText))" Text="@localOptions.AddEntryToListText" ButtonStyle="ButtonStyle.Success" Variant="@localOptions.ElementsDesignVariant" Click="@((args) => AddListParameter<string>(parameter.Key, additionalInfo))"></RadzenButton>
                                    }
                                    else if (parameter.Type == ParameterType.Int_IEnumerable)
                                    {
                                        <RadzenButton Disabled="@localOptions.ReadOnly" aria-description="@(string.Format(localOptions.AddEntryToListAriaDescription, parameterText))" Text="@localOptions.AddEntryToListText" ButtonStyle="ButtonStyle.Success" Variant="@localOptions.ElementsDesignVariant" Click="@((args) => AddListParameter<int>(parameter.Key, additionalInfo))"></RadzenButton>
                                    }
                                    else if (parameter.Type == ParameterType.Decimal_IEnumerable)
                                    {
                                        <RadzenButton Disabled="@localOptions.ReadOnly" aria-description="@(string.Format(localOptions.AddEntryToListAriaDescription, parameterText))" Text="@localOptions.AddEntryToListText" ButtonStyle="ButtonStyle.Success" Variant="@localOptions.ElementsDesignVariant" Click="@((args) => AddListParameter<decimal>(parameter.Key, additionalInfo))"></RadzenButton>
                                    }
                                    else if (parameter.Type == ParameterType.Bool_IEnumerable)
                                    {
                                        <RadzenButton Disabled="@localOptions.ReadOnly" aria-description="@(string.Format(localOptions.AddEntryToListAriaDescription, parameterText))" Text="@localOptions.AddEntryToListText" ButtonStyle="ButtonStyle.Success" Variant="@localOptions.ElementsDesignVariant" Click="@((args) => AddListParameter<bool>(parameter.Key, additionalInfo))"></RadzenButton>
                                    }
                                    else if (parameter.Type == ParameterType.DateTime_IEnumerable || parameter.Type == ParameterType.Date_IEnumerable)
                                    {
                                        <RadzenButton Disabled="@localOptions.ReadOnly" aria-description="@(string.Format(localOptions.AddEntryToListAriaDescription, parameterText))" Text="@localOptions.AddEntryToListText" ButtonStyle="ButtonStyle.Success" Variant="@localOptions.ElementsDesignVariant" Click="@((args) => AddListParameter<DateTime>(parameter.Key, additionalInfo))"></RadzenButton>
                                    }
                                    else if (parameter.Type == ParameterType.ParameterCollection_IEnumerable)
                                    {
                                        <RadzenButton Disabled="@localOptions.ReadOnly" aria-description="@(string.Format(localOptions.AddEntryToListAriaDescription, parameterText))" Text="@localOptions.AddEntryToListText" ButtonStyle="ButtonStyle.Success" Variant="@localOptions.ElementsDesignVariant" Click="@((args) => AddListParameter<ParameterCollection>(parameter.Key, additionalInfo))"></RadzenButton>
                                    }
                                }
                            </RadzenStack>
                        }
                    </RadzenFormField>
                }
            }
        }
    </RadzenStack>
</div>

@code {
    /// <summary>
    /// Get or set the ParameterCollection.
    /// </summary>
    [Parameter]
    public ParameterCollection? ParameterCollection { get => _currentParameterCollection; set => CreateView(value); }

    /// <summary>
    /// Options.
    /// </summary>
    [Parameter]
    public ParameterCollectionViewOptions Options { get; set; } = new ParameterCollectionViewOptions();

    /// <summary>
    /// Will be trigged each time a change is registered.
    /// </summary>
    [Parameter]
    public EventCallback<ParameterCollectionViewOnChangeEventArgs> OnChange { get; set; }

    /// <summary>
    /// Do you have any special components to handle a parameter instead of the default ones? Here you can define them.
    /// </summary>
    [Parameter]
    public IParameterComponentDefinition[]? CustomParameterComponents { get; set; }

    /// <summary>
    /// Do you have any custom converters you want to use to convert the values? Here you can define them.
    /// </summary>
    [Parameter]
    public IParameterValueConverter[]? CustomConverters { get; set; }


    private ParameterCollection? _currentParameterCollection;

    private void CreateView(ParameterCollection? parameterCollection)
    {
        _currentParameterCollection = parameterCollection?.DeepCopyJson();
        StateHasChanged();
    }

    private void ChangeParameter(string parameterKey, object? value)
    {
        if (value != null)
        {
            if (_currentParameterCollection!.GetParameterByKey(parameterKey).SetValue(value, CustomConverters) && OnChange.HasDelegate)
            {
                OnChange.InvokeAsync(new ParameterCollectionViewOnChangeEventArgs(_currentParameterCollection, parameterKey));
            }
        }
    }

    private void UpdateListParameter<TValue>(string parameterKey, int index, TValue? value)
    {
        if (value == null)
        {
            return;
        }

        var list = _currentParameterCollection!.GetByKey<List<TValue>>(parameterKey, CustomConverters);
        if (index < list.Count)
        {
            list[index] = value;
        }
        else if (index == list.Count)
        {
            list.Add(value);
        }
        else
        {
            throw new ArgumentOutOfRangeException(nameof(index), "It should not be possible for the index to be bigger than max one entry extra.");
        }

        ChangeParameter(parameterKey, list);
    }

    /// <summary>
    /// Deletes an entry from the given list.
    /// </summary>
    /// <param name="parameterKey">The key to the list.</param>
    /// <param name="index">The placement the item to be deleted has in the list.</param>
    private void DeleteListParameter<TValue>(string parameterKey, int index)
    {
        var list = _currentParameterCollection!.GetByKey<List<TValue>>(parameterKey, CustomConverters);
        if (index < list.Count)
        {
            list.RemoveAt(index);
        }

        ChangeParameter(parameterKey, list);
    }

    private void AddListParameter<TValue>(string parameterKey, ParameterCollection additionalInfo)
    {
        var defaultValue = Extensions.GetDefaultValue<TValue>(additionalInfo);
        var list = _currentParameterCollection!.GetByKey<List<TValue>>(parameterKey);
        list.Add(defaultValue);
        ChangeParameter(parameterKey, list);
    }

    private List<Tuple<int, object>> GetDataOfList(Parameter parameter)
    {
        if (parameter.Type == ParameterType.String_IEnumerable || parameter.Type == ParameterType.String_Multiline_IEnumerable)
        {
            return parameter.GetValue<string[]>(CustomConverters).GetNumberedList();
        }
        else if (parameter.Type == ParameterType.Int_IEnumerable)
        {
            return parameter.GetValue<int[]>(CustomConverters).GetNumberedList();
        }
        else if (parameter.Type == ParameterType.Decimal_IEnumerable)
        {
            return parameter.GetValue<decimal[]>(CustomConverters).GetNumberedList();
        }
        else if (parameter.Type == ParameterType.Bool_IEnumerable)
        {
            return parameter.GetValue<bool[]>(CustomConverters).GetNumberedList();
        }
        else if (parameter.Type == ParameterType.DateTime_IEnumerable || parameter.Type == ParameterType.Date_IEnumerable)
        {
            return parameter.GetValue<DateTime[]>(CustomConverters).GetNumberedList();
        }
        else if (parameter.Type == ParameterType.ParameterCollection_IEnumerable)
        {
            return parameter.GetValue<ParameterCollection[]>(CustomConverters).GetNumberedList();
        }
        else
        {
            throw new ArgumentOutOfRangeException(nameof(parameter.Type), $"ParameterType are expected to be an IEnumerable type in {nameof(GetDataOfList)}.");
        }
    }
}

